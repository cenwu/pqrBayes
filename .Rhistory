library(devtools)
devtools::build_manual()
library(devtools)
devtools::document()
devtools::document()
devtools::build_manual()
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
install.packages("pqrBayes")
library(pqrBayes)
Data <- function(n,p,quant){
sig1 = matrix(0,p,p)
diag(sig1)=1
for (i in 1: p)
{
for (j in 1: p)
{
sig1[i,j]=0.5^abs(i-j)
}
}
x = MASS::mvrnorm(n,rep(0,p),sig1)
x = cbind(1,x)
error=rt(n,2) -quantile(rt(n,2),probs = quant)
u = runif(n,0.01,0.99)
gamma0 = 2+2*sin(u*2*pi)
gamma2 = -6*u*(1-u)
gamma1 = 2*exp(2*u-1)
gamma3= -4*u^3
y = gamma1*x[,2] + gamma2*x[,3]  + gamma3*x[,4] + gamma0 + error
dat = list(y=y, u=u, x=x, gamma=cbind(gamma0,gamma1,gamma2,gamma3))
return(dat)
}
n=250; p=100; # the actual dimension after basis expansion is 505
rep=200;
quant = 0.5; # focus on median for Bayesian inference
CI_BQRVCSS = CI_BQRVC = CI_BVCSS = CI_BVC= c()
for (h in 1:rep) {
dat = Data(n,p,quant)
y = dat$y
u = dat$u
x = dat$x
g = x[,-1]
kn=2
degree=2
u.grid = (1:200)*0.005
gamma_0_grid = 2+2*sin(2*u.grid*pi)
gamma_1_grid = 2*exp(2*u.grid-1)
gamma_2_grid = -6*u.grid*(1-u.grid)
gamma_3_grid = -4*u.grid^3
coefficient = cbind(gamma_0_grid,gamma_1_grid,gamma_2_grid,gamma_3_grid)
# a varying intercept is automatically included by the package
# BQRVCSS, Bayesian regularized quantile VC model with spike-and-slab priors. Zhou et al. CSDA (2023)
fit = pqrBayes(g, y, u, d=NULL,e=NULL,quant=quant, iterations=10000, burn.in = NULL, spline = list(kn=2,degree=2), robust = TRUE, sparse=TRUE, model = "VC", hyper=NULL,debugging=FALSE)
coverage = coverage(fit,coefficient,u.grid, model = "VC")
CI_BQRVCSS = rbind(CI_BQRVCSS,coverage)
cat("Replicate = ", h, "\n")
}
# the varying intercept has not been regularized
cp_BQRVCSS =  colMeans(CI_BQRVCSS) # 95% empirical coverage probabilities for the varying coefficients under the default setting
cp_BQRVC  =  colMeans(CI_BQRVC)
cp_BQRVCSS
n=250; p=100; # the actual dimension after basis expansion is 505
rep=20;
quant = 0.5; # focus on median for Bayesian inference
CI_BQRVCSS = CI_BQRVC = CI_BVCSS = CI_BVC= c()
for (h in 1:rep) {
dat = Data(n,p,quant)
y = dat$y
u = dat$u
x = dat$x
g = x[,-1]
kn=2
degree=2
u.grid = (1:200)*0.005
gamma_0_grid = 2+2*sin(2*u.grid*pi)
gamma_1_grid = 2*exp(2*u.grid-1)
gamma_2_grid = -6*u.grid*(1-u.grid)
gamma_3_grid = -4*u.grid^3
coefficient = cbind(gamma_0_grid,gamma_1_grid,gamma_2_grid,gamma_3_grid)
# a varying intercept is automatically included by the package
# BQRVCSS, Bayesian regularized quantile VC model with spike-and-slab priors. Zhou et al. CSDA (2023)
fit = pqrBayes(g, y, u, d=NULL,e=NULL,quant=quant, iterations=10000, burn.in = NULL, spline = list(kn=2,degree=2), robust = TRUE, sparse=TRUE, model = "VC", hyper=NULL,debugging=FALSE)
coverage = coverage(fit,coefficient,u.grid, model = "VC")
# BQRVC, Bayesian regularized quantile VC model. Zhou et al. CSDA (2023)
fit1 = pqrBayes(g, y, u, d=NULL,e=NULL,quant=quant, iterations=10000, burn.in = NULL, spline = list(kn=2, degree=2), robust = TRUE, sparse=FALSE, model = "VC", hyper=NULL,debugging=FALSE)
coverage1 = coverage(fit1,coefficient,u.grid, model = "VC")
# BVCSS, Bayesian regularized VC model with spike-and-slab priors. Zhou et al. CSDA (2023)
fit2 = pqrBayes(g, y, u, d = NULL,e=NULL,quant=quant, iterations=10000, burn.in = NULL, spline = list(kn=2, degree=2), robust = FALSE, sparse=TRUE, model = "VC", hyper=NULL,debugging=FALSE)
coverage2 = coverage(fit2,coefficient,u.grid, model = "VC")
# BVC, Bayesian regularized VC model. Zhou et al. CSDA (2023)
fit3 = pqrBayes(g, y, u, d=NULL,e=NULL,quant=quant, iterations=10000, burn.in = NULL, spline = list(kn=2, degree=2), robust = FALSE, sparse=FALSE, model = "VC", hyper=NULL,debugging=FALSE)
coverage3 = coverage(fit3,coefficient,u.grid,model = "VC")
CI_BQRVCSS = rbind(CI_BQRVCSS,coverage)
CI_BQRVC   = rbind(CI_BQRVC,coverage1)
CI_BVCSS  = rbind(CI_BVCSS,coverage2)
CI_BGL    = rbind(CI_BGL,coverage3)
cat("Replicate = ", h, "\n")
}
