library(devtools)
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
library(devtools)
devtools::document()
devtools::build_manual()
library(devtools)
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
Data <- function(n,p,quant){
sig1 = matrix(0,p,p)
diag(sig1)=1
for (i in 1: p)
{
for (j in 1: p)
{
sig1[i,j]=0.5^abs(i-j)
}
}
xx = MASS::mvrnorm(n,rep(0,p),sig1)
x = cbind(1,xx)
error=rt(n,2) -quantile(rt(n,2),probs = quant) # can also be changed to normal error for non-robust setting
beta = c(0,1,1.5,2,rep(0,p-3))
betaa = beta[-1]
y = x%*%beta+error
dat = list(y=y, x=xx, beta=betaa)
return(dat)
}
#95% empirical coverage probabilities for linear regression coefficients
n=100; p=500; rep=1000;
quant = 0.5; # focus on median for Bayesian inference
CI_RBLSS = CI_RBL = CI_BLSS = CI_BL= matrix(0,rep,p)
for (h in 1:rep) {
dat = Data(n,p,quant)
y = dat$y
g = dat$x
coefficient = dat$beta
fit = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = TRUE, sparse=TRUE, model = "linear", hyper=NULL,debugging=FALSE)
coverage = coverage(fit,coefficient,u.grid=NULL, model = "linear")
#fit1 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = TRUE, sparse=FALSE, model = "linear", hyper=NULL,debugging=FALSE)
#coverage1 = coverage(fit1,coefficient,u.grid=NULL, model = "linear")
#fit2 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = FALSE, sparse=TRUE, model= "linear", hyper=NULL,debugging=FALSE)
#coverage2 = coverage(fit2,coefficient,u.grid=NULL, model = "linear")
#fit3 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = FALSE, sparse=FALSE, model = "linear", hyper=NULL,debugging=FALSE)
#coverage3 = coverage(fit3,coefficient,u.grid=NULL, model = "linear")
CI_RBLSS[h,] = coverage
#CI_RBL[rep,]   = coverage1
#CI_BLSS[rep,]  = coverage2
#CI_BL[rep,]    = coverage3
cat("iteration = ", h, "\n")
}
library(pqrbayes)
install.packages("pqrBayes")
library(pqrBayes)
Data <- function(n,p,quant){
sig1 = matrix(0,p,p)
diag(sig1)=1
for (i in 1: p)
{
for (j in 1: p)
{
sig1[i,j]=0.5^abs(i-j)
}
}
xx = MASS::mvrnorm(n,rep(0,p),sig1)
x = cbind(1,xx)
error=rt(n,2) -quantile(rt(n,2),probs = quant) # can also be changed to normal error for non-robust setting
beta = c(0,1,1.5,2,rep(0,p-3))
betaa = beta[-1]
y = x%*%beta+error
dat = list(y=y, x=xx, beta=betaa)
return(dat)
}
#95% empirical coverage probabilities for linear regression coefficients
n=100; p=500; rep=1000;
quant = 0.5; # focus on median for Bayesian inference
CI_RBLSS = CI_RBL = CI_BLSS = CI_BL= matrix(0,rep,p)
for (h in 1:rep) {
dat = Data(n,p,quant)
y = dat$y
g = dat$x
coefficient = dat$beta
fit = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = TRUE, sparse=TRUE, model = "linear", hyper=NULL,debugging=FALSE)
coverage = coverage(fit,coefficient,u.grid=NULL, model = "linear")
#fit1 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = TRUE, sparse=FALSE, model = "linear", hyper=NULL,debugging=FALSE)
#coverage1 = coverage(fit1,coefficient,u.grid=NULL, model = "linear")
#fit2 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = FALSE, sparse=TRUE, model= "linear", hyper=NULL,debugging=FALSE)
#coverage2 = coverage(fit2,coefficient,u.grid=NULL, model = "linear")
#fit3 = pqrBayes(g, y, u=NULL, e=NULL,quant=quant, iterations=10000, kn=NULL, degree=NULL, robust = FALSE, sparse=FALSE, model = "linear", hyper=NULL,debugging=FALSE)
#coverage3 = coverage(fit3,coefficient,u.grid=NULL, model = "linear")
CI_RBLSS[h,] = coverage
#CI_RBL[rep,]   = coverage1
#CI_BLSS[rep,]  = coverage2
#CI_BL[rep,]    = coverage3
cat("iteration = ", h, "\n")
}
# the intercept has not been regularized
cp_RBLSS =  colMeans(CI_RBLSS)[1:3] # 95% empirical coverage probabilities for coefficients under robust linear regression
cp_RBLSS
